![](https://raw.githubusercontent.com/GabrielCourses/PostgreSQL/main/pgAdmin/image/pgAdmin.png)

# pgAdmin

Una vez que hemos instalado y configurado tanto PostgreSQL como pgAdmin vamos a comenzar con este tutorial. Para esto, estoy ocupando la aplicación de escritorio y me he conectado al servidor, <code>localhost</code> usando la contraseña que elegimos en la configuración. 

Para empezar creamos una nueva base de datos llamada <code>Course</code> y teniendo seleccionado este objeto en la parte izquierda de nuestro panel, desplegamos la herramienta Tools.

![](https://raw.githubusercontent.com/GabrielCourses/PostgreSQL/main/pgAdmin/image/tools.png)

- Seleccionamos Tools > Query Tools, donde creamos una tabla <code>empleados</code> con el comando <code>CREATE TABLE \<table\>();</code>.
- Insertamos registros dentro de nuestra tabla con el comando <code>INSERT INTO \<table\> (var1, var2, ..., vanN) VALUES (val1, val2, ..., valN), (va1, val2, ..), ..., (val1, val2, ..., valN)</code>.
- Consultamos la tabla con el total de campos o solo con algunos con el comando <code>SELECT * FROM \<table\></code>.

Ahora vamos a usar la tabla <code>student\_table.txt</code> que se encuentra en la carpeta <code>data</code>. Copiamos y pegamos el código dentro de **Query Tools** y ejecutamos con F5.

![](https://raw.githubusercontent.com/GabrielCourses/PostgreSQL/main/pgAdmin/image/students.png)

### «WHERE» in ProgreSQL

El comando <code>WHERE</code> nos permite filtrar los datos, para mostrar como sucede esto vamos usar la misma tabla <code>students</code>.

Podemos concatenar los campos usando <code>||</code>, en caso de concatenar el nombre podemos dejar espacios blancos con <code>' '</code>. 

![](https://raw.githubusercontent.com/GabrielCourses/PostgreSQL/main/pgAdmin/image/concatenate.png)

Como se nota en la imagen anterior, la variable que acabamos de concatenar no tiene nombre, esto lo resolvemos declarando un alias.

```
-- Concatenate fields with ||
SELECT nombre||' '||apellidopaterno||' '||apellidomaterno, carrera, promedio FROM students
WHERE promedio < 90

-- Assign alias to the variable concatenate
SELECT nombre||' '||apellidopaterno||' '||apellidomaterno AS complete_name, carrera, promedio FROM students
WHERE promedio < 90
```

### Logical operators: AND, OR, NOT.

Hasta ahora hemos filtrado usando un solo criterio, si queremos agregar mas condiciones, podemos hacer uso de los operadores lógicos <code>AND</code>, <code>OR</code>, <code>NOT</code>.

## CREATE customers TABLE

Copiamos el código del fichero <code>customers\_table.txt</code> para la creación de la siguiente tabla.

El CREATE y el INTO los encuentras en el fichero: <code>customers\_table.txt<code>.


## DELATE tables, columns, registers, values.

### DELATE REGISTERS OF A TABLE.

La sintaxis de <code>DELETE</code> es:

```
SELECT \* FROM students

--Borrar un registro de la tabla
DELETE FROM \<table\>
WHERE campo_n = \<valor\>

--Borrar a los alumnos con promedio menor a 90.
DELETE FROM students
WHERE promedio \< 90

--Borrar los alumnos que tengan promedio entre 90 - 95.
DELETE FROM students
WHERE promedio >= 90 AND promedio < 95
```

### Eliminar una tabla

La sintaxis es la siguiente:

```
DROP TABLE \<table1\>, \<table2\>, ...
DROP TABLE IF EXISTS \<table1\>
```

### Editar la tabla

Vamos a modificar un registro de la tabla, es decir, cambiar el valor de un campo especifico, por ejemplo de la tabla empleados vamos a modificar el «nombre» de empleado con <code>numempleado = 1</code>.

```
--Editar algún campo de algún registro
SELECT * FROM employee

UPDATE employee SET nombre='Luis Jose'
WHERE numempledo = 1

--Editar dos campos de un registro
UPDATE employees SET salary=50000, puesto='Product Owner'
WHERE numemloye=3
```

### Sentencia «ORDER»

Para ordenar una tabla respecto a algún campo usamos la sentencia <code>order</code>:

```
SELECT * FROM \<table\> ORDER \<field\>

--Ordenar de manera descendiente
SELECT * FROM employees
ORDER BY = numemploye DESC
```

Volvemos a cargar la tabla <code>customers</code> y ordenamos el campo <code>totaldeuda<code> de mayor a menor.

## Sentencia «GROUP BY»



